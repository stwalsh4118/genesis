generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  dashboardLayout Json?
  accounts        Account[]
  books           Book[]
  collections     Collection[]
  events          Event[]
  sessions        Session[]
  groups          Group[]      @relation("GroupToUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  title      String
  author     String
  pages      Int?
  isbn10     String?
  isbn13     String?
  coverUrl   String?
  read       Boolean      @default(false)
  userId     String
  pagesRead  Int?         @default(0)
  rating     Int?
  review     String?
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection Collection[] @relation("BookToCollection")

  @@unique([userId, title, author])
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  books     Book[]   @relation("BookToCollection")

  @@unique([userId, name])
}

model Group {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  pinnedBookId     String?
  pinnedBook       GroupBook?        @relation(fields: [pinnedBookId], references: [id])
  groupCollections GroupCollection[]
  users            User[]            @relation("GroupToUser")
}

model GroupCollection {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  groupId   String
  group     Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  books     GroupBook[] @relation("GroupBookToGroupCollection")

  @@unique([groupId, name])
}

model GroupBook {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  title           String
  author          String
  pages           Int?
  pagesRead       Int?              @default(0)
  isbn10          String?
  isbn13          String?
  coverUrl        String?
  rating          Int?
  review          String?
  read            Boolean           @default(false)
  pinnedGroups    Group[]
  groupCollection GroupCollection[] @relation("GroupBookToGroupCollection")

  @@unique([title, author])
}

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventData Json
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
